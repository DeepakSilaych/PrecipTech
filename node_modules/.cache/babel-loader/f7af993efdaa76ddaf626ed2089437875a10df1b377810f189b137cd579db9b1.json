{"ast":null,"code":"var _jsxFileName = \"/home/deepak-silaych/Desktop/sem6/ce343/src/components/ThiessenLayer.js\",\n  _s = $RefreshSig$();\nimport React, { useMemo } from 'react';\nimport { Polygon } from 'react-leaflet';\nimport { Delaunay } from 'd3-delaunay';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ThiessenLayer = ({\n  stations,\n  bounds\n}) => {\n  _s();\n  const polygons = useMemo(() => {\n    if (!stations || stations.length < 3) return [];\n    try {\n      // Convert stations to points array\n      const points = stations.map(s => [s.lat, s.lng]);\n\n      // Create Delaunay triangulation\n      const delaunay = Delaunay.from(points);\n      const voronoi = delaunay.voronoi([bounds.minLat, bounds.minLng, bounds.maxLat, bounds.maxLng]);\n\n      // Get polygons and convert them to leaflet format\n      return Array.from({\n        length: points.length\n      }, (_, i) => {\n        const cell = voronoi.cellPolygon(i);\n        if (!cell) return null;\n        // Convert to leaflet format [lat, lng]\n        return cell.map(point => [point[1], point[0]]);\n      }).filter(Boolean);\n    } catch (error) {\n      console.error('Error generating Thiessen polygons:', error);\n      return [];\n    }\n  }, [stations, bounds]);\n  const getPolygonColor = index => {\n    const precipitation = stations[index].precipitation;\n    return precipitation < 50 ? '#3B82F633' :\n    // blue with opacity\n    precipitation < 100 ? '#10B98133' :\n    // green with opacity\n    precipitation < 150 ? '#F59E0B33' :\n    // yellow with opacity\n    '#EF444433'; // red with opacity\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: polygons.map((polygon, index) => /*#__PURE__*/_jsxDEV(Polygon, {\n      positions: polygon,\n      pathOptions: {\n        color: getPolygonColor(index),\n        fillColor: getPolygonColor(index),\n        fillOpacity: 0.5,\n        weight: 2\n      }\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this))\n  }, void 0, false);\n};\n_s(ThiessenLayer, \"bZTpwg8GgkMuRTsQBD2p7BoZoyk=\");\n_c = ThiessenLayer;\nexport default ThiessenLayer;\nvar _c;\n$RefreshReg$(_c, \"ThiessenLayer\");","map":{"version":3,"names":["React","useMemo","Polygon","Delaunay","jsxDEV","_jsxDEV","Fragment","_Fragment","ThiessenLayer","stations","bounds","_s","polygons","length","points","map","s","lat","lng","delaunay","from","voronoi","minLat","minLng","maxLat","maxLng","Array","_","i","cell","cellPolygon","point","filter","Boolean","error","console","getPolygonColor","index","precipitation","children","polygon","positions","pathOptions","color","fillColor","fillOpacity","weight","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/deepak-silaych/Desktop/sem6/ce343/src/components/ThiessenLayer.js"],"sourcesContent":["import React, { useMemo } from 'react';\nimport { Polygon } from 'react-leaflet';\nimport { Delaunay } from 'd3-delaunay';\n\nconst ThiessenLayer = ({ stations, bounds }) => {\n  const polygons = useMemo(() => {\n    if (!stations || stations.length < 3) return [];\n\n    try {\n      // Convert stations to points array\n      const points = stations.map(s => [s.lat, s.lng]);\n      \n      // Create Delaunay triangulation\n      const delaunay = Delaunay.from(points);\n      const voronoi = delaunay.voronoi([\n        bounds.minLat,\n        bounds.minLng,\n        bounds.maxLat,\n        bounds.maxLng\n      ]);\n\n      // Get polygons and convert them to leaflet format\n      return Array.from({ length: points.length }, (_, i) => {\n        const cell = voronoi.cellPolygon(i);\n        if (!cell) return null;\n        // Convert to leaflet format [lat, lng]\n        return cell.map(point => [point[1], point[0]]);\n      }).filter(Boolean);\n    } catch (error) {\n      console.error('Error generating Thiessen polygons:', error);\n      return [];\n    }\n  }, [stations, bounds]);\n\n  const getPolygonColor = (index) => {\n    const precipitation = stations[index].precipitation;\n    return precipitation < 50 ? '#3B82F633' :  // blue with opacity\n           precipitation < 100 ? '#10B98133' :  // green with opacity\n           precipitation < 150 ? '#F59E0B33' :  // yellow with opacity\n           '#EF444433';                        // red with opacity\n  };\n\n  return (\n    <>\n      {polygons.map((polygon, index) => (\n        <Polygon\n          key={index}\n          positions={polygon}\n          pathOptions={{\n            color: getPolygonColor(index),\n            fillColor: getPolygonColor(index),\n            fillOpacity: 0.5,\n            weight: 2\n          }}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default ThiessenLayer;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,OAAO,QAAQ,OAAO;AACtC,SAASC,OAAO,QAAQ,eAAe;AACvC,SAASC,QAAQ,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEvC,MAAMC,aAAa,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAC9C,MAAMC,QAAQ,GAAGX,OAAO,CAAC,MAAM;IAC7B,IAAI,CAACQ,QAAQ,IAAIA,QAAQ,CAACI,MAAM,GAAG,CAAC,EAAE,OAAO,EAAE;IAE/C,IAAI;MACF;MACA,MAAMC,MAAM,GAAGL,QAAQ,CAACM,GAAG,CAACC,CAAC,IAAI,CAACA,CAAC,CAACC,GAAG,EAAED,CAAC,CAACE,GAAG,CAAC,CAAC;;MAEhD;MACA,MAAMC,QAAQ,GAAGhB,QAAQ,CAACiB,IAAI,CAACN,MAAM,CAAC;MACtC,MAAMO,OAAO,GAAGF,QAAQ,CAACE,OAAO,CAAC,CAC/BX,MAAM,CAACY,MAAM,EACbZ,MAAM,CAACa,MAAM,EACbb,MAAM,CAACc,MAAM,EACbd,MAAM,CAACe,MAAM,CACd,CAAC;;MAEF;MACA,OAAOC,KAAK,CAACN,IAAI,CAAC;QAAEP,MAAM,EAAEC,MAAM,CAACD;MAAO,CAAC,EAAE,CAACc,CAAC,EAAEC,CAAC,KAAK;QACrD,MAAMC,IAAI,GAAGR,OAAO,CAACS,WAAW,CAACF,CAAC,CAAC;QACnC,IAAI,CAACC,IAAI,EAAE,OAAO,IAAI;QACtB;QACA,OAAOA,IAAI,CAACd,GAAG,CAACgB,KAAK,IAAI,CAACA,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;MAChD,CAAC,CAAC,CAACC,MAAM,CAACC,OAAO,CAAC;IACpB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC3D,OAAO,EAAE;IACX;EACF,CAAC,EAAE,CAACzB,QAAQ,EAAEC,MAAM,CAAC,CAAC;EAEtB,MAAM0B,eAAe,GAAIC,KAAK,IAAK;IACjC,MAAMC,aAAa,GAAG7B,QAAQ,CAAC4B,KAAK,CAAC,CAACC,aAAa;IACnD,OAAOA,aAAa,GAAG,EAAE,GAAG,WAAW;IAAI;IACpCA,aAAa,GAAG,GAAG,GAAG,WAAW;IAAI;IACrCA,aAAa,GAAG,GAAG,GAAG,WAAW;IAAI;IACrC,WAAW,CAAC,CAAwB;EAC7C,CAAC;EAED,oBACEjC,OAAA,CAAAE,SAAA;IAAAgC,QAAA,EACG3B,QAAQ,CAACG,GAAG,CAAC,CAACyB,OAAO,EAAEH,KAAK,kBAC3BhC,OAAA,CAACH,OAAO;MAENuC,SAAS,EAAED,OAAQ;MACnBE,WAAW,EAAE;QACXC,KAAK,EAAEP,eAAe,CAACC,KAAK,CAAC;QAC7BO,SAAS,EAAER,eAAe,CAACC,KAAK,CAAC;QACjCQ,WAAW,EAAE,GAAG;QAChBC,MAAM,EAAE;MACV;IAAE,GAPGT,KAAK;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAQX,CACF;EAAC,gBACF,CAAC;AAEP,CAAC;AAACvC,EAAA,CAtDIH,aAAa;AAAA2C,EAAA,GAAb3C,aAAa;AAwDnB,eAAeA,aAAa;AAAC,IAAA2C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}