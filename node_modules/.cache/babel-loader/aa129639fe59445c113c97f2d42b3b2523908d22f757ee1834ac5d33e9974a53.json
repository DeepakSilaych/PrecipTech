{"ast":null,"code":"import { Delaunay } from 'd3-delaunay';\nimport * as d3 from 'd3-contour';\n\n// Arithmetic Mean Method\nexport const calculateArithmeticMean = stations => {\n  if (!stations || stations.length === 0) return 0;\n  const sum = stations.reduce((acc, station) => acc + station.precipitation, 0);\n  return sum / stations.length;\n};\n\n// Normal Ratio Method\nexport const calculateNormalRatio = (stations, normalPrecipitation) => {\n  if (!stations || stations.length === 0 || !normalPrecipitation) return 0;\n\n  // Calculate weighted sum based on normal precipitation ratios\n  let weightedSum = 0;\n  stations.forEach(station => {\n    // Weight each station's precipitation by the ratio of normal precipitation\n    weightedSum += station.precipitation * normalPrecipitation / stations.length;\n  });\n  return weightedSum;\n};\n\n// Inverse Distance Weighting Method\nexport const calculateIDW = (stations, targetLat, targetLng, power = 2) => {\n  if (!stations || stations.length === 0) return 0;\n  let weightedSum = 0;\n  let weightSum = 0;\n  stations.forEach(station => {\n    const distance = calculateDistance(targetLat, targetLng, station.lat, station.lng);\n    if (distance === 0) return station.precipitation;\n    const weight = 1 / Math.pow(distance, power);\n    weightedSum += station.precipitation * weight;\n    weightSum += weight;\n  });\n  return weightedSum / weightSum;\n};\n\n// Thiessen Polygon Method\nexport const calculateThiessenPolygon = (stations, bounds) => {\n  if (!stations || stations.length < 3) return null;\n  try {\n    // Convert stations to points array\n    const points = stations.map(s => [s.lat, s.lng]);\n\n    // Create Delaunay triangulation\n    const delaunay = Delaunay.from(points);\n    const voronoi = delaunay.voronoi([bounds.minLat, bounds.minLng, bounds.maxLat, bounds.maxLng]);\n\n    // Calculate areas and weighted precipitation\n    let totalArea = 0;\n    let weightedSum = 0;\n    for (let i = 0; i < points.length; i++) {\n      const cell = voronoi.cellPolygon(i);\n      if (cell) {\n        const area = calculatePolygonArea(cell);\n        weightedSum += area * stations[i].precipitation;\n        totalArea += area;\n      }\n    }\n    return {\n      value: weightedSum / totalArea,\n      polygons: Array.from({\n        length: points.length\n      }, (_, i) => voronoi.cellPolygon(i)).filter(Boolean)\n    };\n  } catch (error) {\n    console.error('Error calculating Thiessen polygons:', error);\n    return null;\n  }\n};\n\n// Isohyetal Method\nexport const calculateIsohyetal = (stations, bounds, intervals = 5) => {\n  if (!stations || stations.length < 3) return null;\n  try {\n    // Create a grid of values using IDW interpolation\n    const gridSize = 50;\n    const dx = (bounds.maxLng - bounds.minLng) / gridSize;\n    const dy = (bounds.maxLat - bounds.minLat) / gridSize;\n    const values = new Array(gridSize * gridSize);\n\n    // Generate grid values using IDW\n    for (let i = 0; i < gridSize; i++) {\n      for (let j = 0; j < gridSize; j++) {\n        const lat = bounds.minLat + i * dy;\n        const lng = bounds.minLng + j * dx;\n        values[i * gridSize + j] = calculateIDW(stations, lat, lng);\n      }\n    }\n\n    // Generate contours\n    const contours = d3.contours().size([gridSize, gridSize]).thresholds(intervals)(values);\n\n    // Calculate area-weighted average\n    let totalArea = 0;\n    let weightedSum = 0;\n    for (let i = 0; i < contours.length - 1; i++) {\n      const area = calculateContourArea(contours[i]);\n      const avgValue = (contours[i].value + contours[i + 1].value) / 2;\n      weightedSum += area * avgValue;\n      totalArea += area;\n    }\n    return {\n      value: weightedSum / totalArea,\n      contours: contours.map(contour => ({\n        value: contour.value,\n        coordinates: contour.coordinates\n      }))\n    };\n  } catch (error) {\n    console.error('Error calculating isohyets:', error);\n    return null;\n  }\n};\n\n// Helper Functions\nfunction calculateDistance(lat1, lon1, lat2, lon2) {\n  const R = 6371; // Earth's radius in km\n  const dLat = toRad(lat2 - lat1);\n  const dLon = toRad(lon2 - lon1);\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c;\n}\nfunction toRad(degrees) {\n  return degrees * Math.PI / 180;\n}\nfunction calculatePolygonArea(polygon) {\n  if (!polygon || polygon.length < 3) return 0;\n  let area = 0;\n  for (let i = 0; i < polygon.length; i++) {\n    const j = (i + 1) % polygon.length;\n    area += polygon[i][0] * polygon[j][1];\n    area -= polygon[j][0] * polygon[i][1];\n  }\n  return Math.abs(area) / 2;\n}\nfunction calculateContourArea(contour) {\n  let totalArea = 0;\n  contour.coordinates.forEach(polygon => {\n    totalArea += calculatePolygonArea(polygon[0]); // Use outer ring only\n  });\n  return totalArea;\n}","map":{"version":3,"names":["Delaunay","d3","calculateArithmeticMean","stations","length","sum","reduce","acc","station","precipitation","calculateNormalRatio","normalPrecipitation","weightedSum","forEach","calculateIDW","targetLat","targetLng","power","weightSum","distance","calculateDistance","lat","lng","weight","Math","pow","calculateThiessenPolygon","bounds","points","map","s","delaunay","from","voronoi","minLat","minLng","maxLat","maxLng","totalArea","i","cell","cellPolygon","area","calculatePolygonArea","value","polygons","Array","_","filter","Boolean","error","console","calculateIsohyetal","intervals","gridSize","dx","dy","values","j","contours","size","thresholds","calculateContourArea","avgValue","contour","coordinates","lat1","lon1","lat2","lon2","R","dLat","toRad","dLon","a","sin","cos","c","atan2","sqrt","degrees","PI","polygon","abs"],"sources":["/home/deepak-silaych/Desktop/sem6/ce343/src/utils/calculations.js"],"sourcesContent":["import { Delaunay } from 'd3-delaunay';\nimport * as d3 from 'd3-contour';\n\n// Arithmetic Mean Method\nexport const calculateArithmeticMean = (stations) => {\n  if (!stations || stations.length === 0) return 0;\n  const sum = stations.reduce((acc, station) => acc + station.precipitation, 0);\n  return sum / stations.length;\n};\n\n// Normal Ratio Method\nexport const calculateNormalRatio = (stations, normalPrecipitation) => {\n  if (!stations || stations.length === 0 || !normalPrecipitation) return 0;\n  \n  // Calculate weighted sum based on normal precipitation ratios\n  let weightedSum = 0;\n  stations.forEach(station => {\n    // Weight each station's precipitation by the ratio of normal precipitation\n    weightedSum += (station.precipitation * normalPrecipitation) / stations.length;\n  });\n  \n  return weightedSum;\n};\n\n// Inverse Distance Weighting Method\nexport const calculateIDW = (stations, targetLat, targetLng, power = 2) => {\n  if (!stations || stations.length === 0) return 0;\n\n  let weightedSum = 0;\n  let weightSum = 0;\n\n  stations.forEach(station => {\n    const distance = calculateDistance(targetLat, targetLng, station.lat, station.lng);\n    if (distance === 0) return station.precipitation;\n\n    const weight = 1 / Math.pow(distance, power);\n    weightedSum += station.precipitation * weight;\n    weightSum += weight;\n  });\n\n  return weightedSum / weightSum;\n};\n\n// Thiessen Polygon Method\nexport const calculateThiessenPolygon = (stations, bounds) => {\n  if (!stations || stations.length < 3) return null;\n\n  try {\n    // Convert stations to points array\n    const points = stations.map(s => [s.lat, s.lng]);\n    \n    // Create Delaunay triangulation\n    const delaunay = Delaunay.from(points);\n    const voronoi = delaunay.voronoi([\n      bounds.minLat,\n      bounds.minLng,\n      bounds.maxLat,\n      bounds.maxLng\n    ]);\n\n    // Calculate areas and weighted precipitation\n    let totalArea = 0;\n    let weightedSum = 0;\n\n    for (let i = 0; i < points.length; i++) {\n      const cell = voronoi.cellPolygon(i);\n      if (cell) {\n        const area = calculatePolygonArea(cell);\n        weightedSum += area * stations[i].precipitation;\n        totalArea += area;\n      }\n    }\n\n    return {\n      value: weightedSum / totalArea,\n      polygons: Array.from({ length: points.length }, (_, i) => voronoi.cellPolygon(i)).filter(Boolean)\n    };\n  } catch (error) {\n    console.error('Error calculating Thiessen polygons:', error);\n    return null;\n  }\n};\n\n// Isohyetal Method\nexport const calculateIsohyetal = (stations, bounds, intervals = 5) => {\n  if (!stations || stations.length < 3) return null;\n\n  try {\n    // Create a grid of values using IDW interpolation\n    const gridSize = 50;\n    const dx = (bounds.maxLng - bounds.minLng) / gridSize;\n    const dy = (bounds.maxLat - bounds.minLat) / gridSize;\n    const values = new Array(gridSize * gridSize);\n\n    // Generate grid values using IDW\n    for (let i = 0; i < gridSize; i++) {\n      for (let j = 0; j < gridSize; j++) {\n        const lat = bounds.minLat + (i * dy);\n        const lng = bounds.minLng + (j * dx);\n        values[i * gridSize + j] = calculateIDW(stations, lat, lng);\n      }\n    }\n\n    // Generate contours\n    const contours = d3.contours()\n      .size([gridSize, gridSize])\n      .thresholds(intervals)\n      (values);\n\n    // Calculate area-weighted average\n    let totalArea = 0;\n    let weightedSum = 0;\n\n    for (let i = 0; i < contours.length - 1; i++) {\n      const area = calculateContourArea(contours[i]);\n      const avgValue = (contours[i].value + contours[i + 1].value) / 2;\n      weightedSum += area * avgValue;\n      totalArea += area;\n    }\n\n    return {\n      value: weightedSum / totalArea,\n      contours: contours.map(contour => ({\n        value: contour.value,\n        coordinates: contour.coordinates\n      }))\n    };\n  } catch (error) {\n    console.error('Error calculating isohyets:', error);\n    return null;\n  }\n};\n\n// Helper Functions\nfunction calculateDistance(lat1, lon1, lat2, lon2) {\n  const R = 6371; // Earth's radius in km\n  const dLat = toRad(lat2 - lat1);\n  const dLon = toRad(lon2 - lon1);\n  const a = \n    Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * \n    Math.sin(dLon/2) * Math.sin(dLon/2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n  return R * c;\n}\n\nfunction toRad(degrees) {\n  return degrees * Math.PI / 180;\n}\n\nfunction calculatePolygonArea(polygon) {\n  if (!polygon || polygon.length < 3) return 0;\n  \n  let area = 0;\n  for (let i = 0; i < polygon.length; i++) {\n    const j = (i + 1) % polygon.length;\n    area += polygon[i][0] * polygon[j][1];\n    area -= polygon[j][0] * polygon[i][1];\n  }\n  return Math.abs(area) / 2;\n}\n\nfunction calculateContourArea(contour) {\n  let totalArea = 0;\n  contour.coordinates.forEach(polygon => {\n    totalArea += calculatePolygonArea(polygon[0]); // Use outer ring only\n  });\n  return totalArea;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}