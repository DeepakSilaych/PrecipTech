{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { useMap } from 'react-leaflet';\nimport L from 'leaflet';\nimport * as d3 from 'd3';\nconst ThiessenLayer = ({\n  stations,\n  bounds\n}) => {\n  _s();\n  const map = useMap();\n  useEffect(() => {\n    if (!stations || stations.length < 3 || !bounds) return;\n\n    // Remove existing layer if any\n    const existingLayer = map._layers && Object.values(map._layers).find(layer => layer.options && layer.options.className === 'thiessen-layer');\n    if (existingLayer) {\n      map.removeLayer(existingLayer);\n    }\n\n    // Create Voronoi generator\n    const voronoi = d3.Delaunay.from(stations, d => map.latLngToLayerPoint([d.lat, d.lng]).x, d => map.latLngToLayerPoint([d.lat, d.lng]).y).voronoi([map.latLngToLayerPoint([bounds.minLat, bounds.minLng]).x, map.latLngToLayerPoint([bounds.minLat, bounds.minLng]).y, map.latLngToLayerPoint([bounds.maxLat, bounds.maxLng]).x, map.latLngToLayerPoint([bounds.maxLat, bounds.maxLng]).y]);\n\n    // Create polygons for each station\n    const polygons = stations.map((station, i) => {\n      const cell = voronoi.cellPolygon(i);\n      if (!cell) return null;\n\n      // Convert cell points back to LatLng\n      const latLngs = cell.map(point => {\n        const layerPoint = L.point(point[0], point[1]);\n        return map.layerPointToLatLng(layerPoint);\n      });\n\n      // Create polygon with station's precipitation value\n      const polygon = L.polygon(latLngs, {\n        color: getColorForPrecipitation(station.precipitation),\n        weight: 2,\n        fillOpacity: 0.4,\n        className: 'thiessen-polygon'\n      });\n\n      // Add popup with station info\n      polygon.bindPopup(`\n        <div>\n          <h3 class=\"font-bold\">${station.name || `Station ${i + 1}`}</h3>\n          <p>Precipitation: ${station.precipitation} mm</p>\n        </div>\n      `);\n      return polygon;\n    }).filter(Boolean);\n\n    // Create layer group and add to map\n    const layerGroup = L.layerGroup(polygons, {\n      className: 'thiessen-layer'\n    }).addTo(map);\n\n    // Update polygons when map is zoomed or moved\n    const updatePolygons = () => {\n      polygons.forEach((polygon, i) => {\n        const cell = voronoi.cellPolygon(i);\n        if (!cell) return;\n        const latLngs = cell.map(point => {\n          const layerPoint = L.point(point[0], point[1]);\n          return map.layerPointToLatLng(layerPoint);\n        });\n        polygon.setLatLngs(latLngs);\n      });\n    };\n    map.on('zoomend moveend', updatePolygons);\n\n    // Cleanup\n    return () => {\n      map.removeLayer(layerGroup);\n      map.off('zoomend moveend', updatePolygons);\n    };\n  }, [map, stations, bounds]);\n  return null;\n};\n\n// Helper function to get color based on precipitation value\n_s(ThiessenLayer, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n_c = ThiessenLayer;\nfunction getColorForPrecipitation(precipitation) {\n  // Use d3 color scale for smooth color transitions\n  const colorScale = d3.scaleSequential().domain([0, 200]).interpolator(d3.interpolateRainbow);\n  return colorScale(precipitation);\n}\nexport default ThiessenLayer;\nvar _c;\n$RefreshReg$(_c, \"ThiessenLayer\");","map":{"version":3,"names":["useEffect","useMap","L","d3","ThiessenLayer","stations","bounds","_s","map","length","existingLayer","_layers","Object","values","find","layer","options","className","removeLayer","voronoi","Delaunay","from","d","latLngToLayerPoint","lat","lng","x","y","minLat","minLng","maxLat","maxLng","polygons","station","i","cell","cellPolygon","latLngs","point","layerPoint","layerPointToLatLng","polygon","color","getColorForPrecipitation","precipitation","weight","fillOpacity","bindPopup","name","filter","Boolean","layerGroup","addTo","updatePolygons","forEach","setLatLngs","on","off","_c","colorScale","scaleSequential","domain","interpolator","interpolateRainbow","$RefreshReg$"],"sources":["/home/deepak-silaych/Desktop/sem6/ce343/src/components/ThiessenLayer.js"],"sourcesContent":["import { useEffect } from 'react';\nimport { useMap } from 'react-leaflet';\nimport L from 'leaflet';\nimport * as d3 from 'd3';\n\nconst ThiessenLayer = ({ stations, bounds }) => {\n  const map = useMap();\n\n  useEffect(() => {\n    if (!stations || stations.length < 3 || !bounds) return;\n\n    // Remove existing layer if any\n    const existingLayer = map._layers && Object.values(map._layers).find(\n      layer => layer.options && layer.options.className === 'thiessen-layer'\n    );\n    if (existingLayer) {\n      map.removeLayer(existingLayer);\n    }\n\n    // Create Voronoi generator\n    const voronoi = d3.Delaunay\n      .from(\n        stations,\n        d => map.latLngToLayerPoint([d.lat, d.lng]).x,\n        d => map.latLngToLayerPoint([d.lat, d.lng]).y\n      )\n      .voronoi([\n        map.latLngToLayerPoint([bounds.minLat, bounds.minLng]).x,\n        map.latLngToLayerPoint([bounds.minLat, bounds.minLng]).y,\n        map.latLngToLayerPoint([bounds.maxLat, bounds.maxLng]).x,\n        map.latLngToLayerPoint([bounds.maxLat, bounds.maxLng]).y\n      ]);\n\n    // Create polygons for each station\n    const polygons = stations.map((station, i) => {\n      const cell = voronoi.cellPolygon(i);\n      if (!cell) return null;\n\n      // Convert cell points back to LatLng\n      const latLngs = cell.map(point => {\n        const layerPoint = L.point(point[0], point[1]);\n        return map.layerPointToLatLng(layerPoint);\n      });\n\n      // Create polygon with station's precipitation value\n      const polygon = L.polygon(latLngs, {\n        color: getColorForPrecipitation(station.precipitation),\n        weight: 2,\n        fillOpacity: 0.4,\n        className: 'thiessen-polygon'\n      });\n\n      // Add popup with station info\n      polygon.bindPopup(`\n        <div>\n          <h3 class=\"font-bold\">${station.name || `Station ${i + 1}`}</h3>\n          <p>Precipitation: ${station.precipitation} mm</p>\n        </div>\n      `);\n\n      return polygon;\n    }).filter(Boolean);\n\n    // Create layer group and add to map\n    const layerGroup = L.layerGroup(polygons, {\n      className: 'thiessen-layer'\n    }).addTo(map);\n\n    // Update polygons when map is zoomed or moved\n    const updatePolygons = () => {\n      polygons.forEach((polygon, i) => {\n        const cell = voronoi.cellPolygon(i);\n        if (!cell) return;\n\n        const latLngs = cell.map(point => {\n          const layerPoint = L.point(point[0], point[1]);\n          return map.layerPointToLatLng(layerPoint);\n        });\n\n        polygon.setLatLngs(latLngs);\n      });\n    };\n\n    map.on('zoomend moveend', updatePolygons);\n\n    // Cleanup\n    return () => {\n      map.removeLayer(layerGroup);\n      map.off('zoomend moveend', updatePolygons);\n    };\n  }, [map, stations, bounds]);\n\n  return null;\n};\n\n// Helper function to get color based on precipitation value\nfunction getColorForPrecipitation(precipitation) {\n  // Use d3 color scale for smooth color transitions\n  const colorScale = d3.scaleSequential()\n    .domain([0, 200])\n    .interpolator(d3.interpolateRainbow);\n\n  return colorScale(precipitation);\n}\n\nexport default ThiessenLayer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}