{"ast":null,"code":"var _jsxFileName = \"/home/deepak-silaych/Desktop/sem6/ce343/src/components/IsohyetalLayer.js\",\n  _s = $RefreshSig$();\nimport React, { useMemo } from 'react';\nimport { Polyline } from 'react-leaflet';\nimport * as d3 from 'd3-contour';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst IsohyetalLayer = ({\n  stations,\n  bounds\n}) => {\n  _s();\n  const contours = useMemo(() => {\n    if (!stations || stations.length < 3) return [];\n    try {\n      // Create a grid of values using IDW interpolation\n      const gridSize = 50;\n      const dx = (bounds.maxLng - bounds.minLng) / gridSize;\n      const dy = (bounds.maxLat - bounds.minLat) / gridSize;\n      const values = new Array(gridSize * gridSize);\n\n      // Generate grid values using IDW\n      for (let i = 0; i < gridSize; i++) {\n        for (let j = 0; j < gridSize; j++) {\n          const lat = bounds.minLat + i * dy;\n          const lng = bounds.minLng + j * dx;\n          values[i * gridSize + j] = calculateIDWValue(stations, lat, lng);\n        }\n      }\n\n      // Generate contours\n      const contourGenerator = d3.contours().size([gridSize, gridSize]).thresholds(8); // Number of contour lines\n\n      const contourData = contourGenerator(values);\n\n      // Transform contour coordinates to map coordinates\n      return contourData.map(contour => ({\n        value: contour.value,\n        lines: contour.coordinates.map(line => line[0].map(point => [bounds.minLat + point[1] * dy, bounds.minLng + point[0] * dx]))\n      }));\n    } catch (error) {\n      console.error('Error generating isohyets:', error);\n      return [];\n    }\n  }, [stations, bounds]);\n  const getContourColor = value => {\n    const maxPrecip = Math.max(...stations.map(s => s.precipitation));\n    const ratio = value / maxPrecip;\n    return ratio < 0.25 ? '#3B82F6' :\n    // blue\n    ratio < 0.5 ? '#10B981' :\n    // green\n    ratio < 0.75 ? '#F59E0B' :\n    // yellow\n    '#EF4444'; // red\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: contours.map((contour, i) => contour.lines.map((line, j) => /*#__PURE__*/_jsxDEV(Polyline, {\n      positions: line,\n      pathOptions: {\n        color: getContourColor(contour.value),\n        weight: 2,\n        opacity: 0.8\n      }\n    }, `${i}-${j}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }, this)))\n  }, void 0, false);\n};\n\n// Helper function to calculate IDW value at a point\n_s(IsohyetalLayer, \"0JvvThbb8UzXsf8FIfqDo+YD4Mg=\");\n_c = IsohyetalLayer;\nfunction calculateIDWValue(stations, lat, lng) {\n  let weightedSum = 0;\n  let weightSum = 0;\n  stations.forEach(station => {\n    const distance = calculateDistance(lat, lng, station.lat, station.lng);\n    if (distance === 0) return station.precipitation;\n    const weight = 1 / Math.pow(distance, 2);\n    weightedSum += station.precipitation * weight;\n    weightSum += weight;\n  });\n  return weightedSum / weightSum;\n}\nfunction calculateDistance(lat1, lon1, lat2, lon2) {\n  const R = 6371; // Earth's radius in km\n  const dLat = toRad(lat2 - lat1);\n  const dLon = toRad(lon2 - lon1);\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c;\n}\nwe;\nvar _c;\n$RefreshReg$(_c, \"IsohyetalLayer\");","map":{"version":3,"names":["React","useMemo","Polyline","d3","jsxDEV","_jsxDEV","Fragment","_Fragment","IsohyetalLayer","stations","bounds","_s","contours","length","gridSize","dx","maxLng","minLng","dy","maxLat","minLat","values","Array","i","j","lat","lng","calculateIDWValue","contourGenerator","size","thresholds","contourData","map","contour","value","lines","coordinates","line","point","error","console","getContourColor","maxPrecip","Math","max","s","precipitation","ratio","children","positions","pathOptions","color","weight","opacity","fileName","_jsxFileName","lineNumber","columnNumber","_c","weightedSum","weightSum","forEach","station","distance","calculateDistance","pow","lat1","lon1","lat2","lon2","R","dLat","toRad","dLon","a","sin","cos","c","atan2","sqrt","we","$RefreshReg$"],"sources":["/home/deepak-silaych/Desktop/sem6/ce343/src/components/IsohyetalLayer.js"],"sourcesContent":["import React, { useMemo } from 'react';\nimport { Polyline } from 'react-leaflet';\nimport * as d3 from 'd3-contour';\n\nconst IsohyetalLayer = ({ stations, bounds }) => {\n  const contours = useMemo(() => {\n    if (!stations || stations.length < 3) return [];\n\n    try {\n      // Create a grid of values using IDW interpolation\n      const gridSize = 50;\n      const dx = (bounds.maxLng - bounds.minLng) / gridSize;\n      const dy = (bounds.maxLat - bounds.minLat) / gridSize;\n      const values = new Array(gridSize * gridSize);\n\n      // Generate grid values using IDW\n      for (let i = 0; i < gridSize; i++) {\n        for (let j = 0; j < gridSize; j++) {\n          const lat = bounds.minLat + (i * dy);\n          const lng = bounds.minLng + (j * dx);\n          values[i * gridSize + j] = calculateIDWValue(stations, lat, lng);\n        }\n      }\n\n      // Generate contours\n      const contourGenerator = d3.contours()\n        .size([gridSize, gridSize])\n        .thresholds(8); // Number of contour lines\n\n      const contourData = contourGenerator(values);\n\n      // Transform contour coordinates to map coordinates\n      return contourData.map(contour => ({\n        value: contour.value,\n        lines: contour.coordinates.map(line => \n          line[0].map(point => [\n            bounds.minLat + (point[1] * dy),\n            bounds.minLng + (point[0] * dx)\n          ])\n        )\n      }));\n    } catch (error) {\n      console.error('Error generating isohyets:', error);\n      return [];\n    }\n  }, [stations, bounds]);\n\n  const getContourColor = (value) => {\n    const maxPrecip = Math.max(...stations.map(s => s.precipitation));\n    const ratio = value / maxPrecip;\n    return ratio < 0.25 ? '#3B82F6' :  // blue\n           ratio < 0.5 ? '#10B981' :   // green\n           ratio < 0.75 ? '#F59E0B' :  // yellow\n           '#EF4444';                  // red\n  };\n\n  return (\n    <>\n      {contours.map((contour, i) => \n        contour.lines.map((line, j) => (\n          <Polyline\n            key={`${i}-${j}`}\n            positions={line}\n            pathOptions={{\n              color: getContourColor(contour.value),\n              weight: 2,\n              opacity: 0.8\n            }}\n          >\n          </Polyline>\n        ))\n      )}\n    </>\n  );\n};\n\n// Helper function to calculate IDW value at a point\nfunction calculateIDWValue(stations, lat, lng) {\n  let weightedSum = 0;\n  let weightSum = 0;\n\n  stations.forEach(station => {\n    const distance = calculateDistance(lat, lng, station.lat, station.lng);\n    if (distance === 0) return station.precipitation;\n\n    const weight = 1 / Math.pow(distance, 2);\n    weightedSum += station.precipitation * weight;\n    weightSum += weight;\n  });\n\n  return weightedSum / weightSum;\n}\n\nfunction calculateDistance(lat1, lon1, lat2, lon2) {\n  const R = 6371; // Earth's radius in km\n  const dLat = toRad(lat2 - lat1);\n  const dLon = toRad(lon2 - lon1);\n  const a = \n    Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * \n    Math.sin(dLon/2) * Math.sin(dLon/2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n  return R * c;\n}\nwe "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}