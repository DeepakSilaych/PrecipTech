{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useMemo } from 'react';\nimport { useMap } from 'react-leaflet';\nimport L from 'leaflet';\nimport * as d3 from 'd3-contour';\nconst IsohyetalLayer = ({\n  stations,\n  intervals = 5\n}) => {\n  _s();\n  const map = useMap();\n  const contourLayer = useMemo(() => {\n    if (!stations || stations.length < 3) return null;\n\n    // Create a grid of values using IDW interpolation\n    const bounds = map.getBounds();\n    const width = map.getSize().x;\n    const height = map.getSize().y;\n    const cellSize = 10;\n    const cols = Math.floor(width / cellSize);\n    const rows = Math.floor(height / cellSize);\n    const values = new Array(rows * cols);\n\n    // Generate grid values\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        const point = map.layerPointToLatLng([j * cellSize, i * cellSize]);\n        values[i * cols + j] = interpolateIDW(stations, point.lat, point.lng);\n      }\n    }\n\n    // Generate contours\n    const contours = d3.contours().size([cols, rows]).thresholds(intervals)(values);\n\n    // Create SVG layer\n    const svg = L.svg().addTo(map);\n    const g = L.SVG.create('g');\n\n    // Draw contour lines\n    contours.forEach(contour => {\n      const latLngs = contour.coordinates.map(ring => {\n        return ring[0].map(point => {\n          const p = map.layerPointToLatLng([point[0] * cellSize, point[1] * cellSize]);\n          return [p.lat, p.lng];\n        });\n      });\n      latLngs.forEach(ring => {\n        L.polyline(ring, {\n          color: getColorForPrecipitation(contour.value),\n          weight: 2,\n          opacity: 0.7\n        }).addTo(map);\n      });\n    });\n    return g;\n  }, [stations, map, intervals]);\n  return null;\n};\n_s(IsohyetalLayer, \"n7IfbaTMvowZq6f4ZrQ2TQCUPmc=\", false, function () {\n  return [useMap];\n});\n_c = IsohyetalLayer;\nfunction interpolateIDW(stations, lat, lng, power = 2) {\n  let weightedSum = 0;\n  let weightSum = 0;\n  stations.forEach(station => {\n    const distance = calculateDistance(lat, lng, station.lat, station.lng);\n    if (distance === 0) return station.precipitation;\n    const weight = 1 / Math.pow(distance, power);\n    weightedSum += station.precipitation * weight;\n    weightSum += weight;\n  });\n  return weightedSum / weightSum;\n}\nfunction calculateDistance(lat1, lon1, lat2, lon2) {\n  const R = 6371; // Earth's radius in km\n  const dLat = toRad(lat2 - lat1);\n  const dLon = toRad(lon2 - lon1);\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c;\n}\nfunction toRad(degrees) {\n  return degrees * Math.PI / 180;\n}\nfunction getColorForPrecipitation(value) {\n  return value < 50 ? '#3B82F6' :\n  // blue\n  value < 100 ? '#10B981' :\n  // green\n  value < 150 ? '#F59E0B' :\n  // yellow\n  '#EF4444'; // red\n}\nexport default IsohyetalLayer;\nvar _c;\n$RefreshReg$(_c, \"IsohyetalLayer\");","map":{"version":3,"names":["React","useMemo","useMap","L","d3","IsohyetalLayer","stations","intervals","_s","map","contourLayer","length","bounds","getBounds","width","getSize","x","height","y","cellSize","cols","Math","floor","rows","values","Array","i","j","point","layerPointToLatLng","interpolateIDW","lat","lng","contours","size","thresholds","svg","addTo","g","SVG","create","forEach","contour","latLngs","coordinates","ring","p","polyline","color","getColorForPrecipitation","value","weight","opacity","_c","power","weightedSum","weightSum","station","distance","calculateDistance","precipitation","pow","lat1","lon1","lat2","lon2","R","dLat","toRad","dLon","a","sin","cos","c","atan2","sqrt","degrees","PI","$RefreshReg$"],"sources":["/home/deepak-silaych/Desktop/sem6/ce343/src/components/IsohyetalLayer.js"],"sourcesContent":["import React, { useMemo } from 'react';\nimport { useMap } from 'react-leaflet';\nimport L from 'leaflet';\nimport * as d3 from 'd3-contour';\n\nconst IsohyetalLayer = ({ stations, intervals = 5 }) => {\n  const map = useMap();\n\n  const contourLayer = useMemo(() => {\n    if (!stations || stations.length < 3) return null;\n\n    // Create a grid of values using IDW interpolation\n    const bounds = map.getBounds();\n    const width = map.getSize().x;\n    const height = map.getSize().y;\n    const cellSize = 10;\n    const cols = Math.floor(width / cellSize);\n    const rows = Math.floor(height / cellSize);\n    const values = new Array(rows * cols);\n\n    // Generate grid values\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        const point = map.layerPointToLatLng([j * cellSize, i * cellSize]);\n        values[i * cols + j] = interpolateIDW(stations, point.lat, point.lng);\n      }\n    }\n\n    // Generate contours\n    const contours = d3.contours()\n      .size([cols, rows])\n      .thresholds(intervals)\n      (values);\n\n    // Create SVG layer\n    const svg = L.svg().addTo(map);\n    const g = L.SVG.create('g');\n\n    // Draw contour lines\n    contours.forEach(contour => {\n      const latLngs = contour.coordinates.map(ring => {\n        return ring[0].map(point => {\n          const p = map.layerPointToLatLng([\n            point[0] * cellSize,\n            point[1] * cellSize\n          ]);\n          return [p.lat, p.lng];\n        });\n      });\n\n      latLngs.forEach(ring => {\n        L.polyline(ring, {\n          color: getColorForPrecipitation(contour.value),\n          weight: 2,\n          opacity: 0.7\n        }).addTo(map);\n      });\n    });\n\n    return g;\n  }, [stations, map, intervals]);\n\n  return null;\n};\n\nfunction interpolateIDW(stations, lat, lng, power = 2) {\n  let weightedSum = 0;\n  let weightSum = 0;\n\n  stations.forEach(station => {\n    const distance = calculateDistance(lat, lng, station.lat, station.lng);\n    if (distance === 0) return station.precipitation;\n\n    const weight = 1 / Math.pow(distance, power);\n    weightedSum += station.precipitation * weight;\n    weightSum += weight;\n  });\n\n  return weightedSum / weightSum;\n}\n\nfunction calculateDistance(lat1, lon1, lat2, lon2) {\n  const R = 6371; // Earth's radius in km\n  const dLat = toRad(lat2 - lat1);\n  const dLon = toRad(lon2 - lon1);\n  const a = \n    Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * \n    Math.sin(dLon/2) * Math.sin(dLon/2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n  return R * c;\n}\n\nfunction toRad(degrees) {\n  return degrees * Math.PI / 180;\n}\n\nfunction getColorForPrecipitation(value) {\n  return value < 50 ? '#3B82F6' :  // blue\n         value < 100 ? '#10B981' :  // green\n         value < 150 ? '#F59E0B' :  // yellow\n         '#EF4444';                 // red\n}\n\nexport default IsohyetalLayer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}