{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useMemo } from 'react';\nimport { useMap } from 'react-leaflet';\nimport L from 'leaflet';\nimport { Delaunay } from 'd3-delaunay';\nconst ThiessenLayer = ({\n  stations\n}) => {\n  _s();\n  const map = useMap();\n  const voronoiLayer = useMemo(() => {\n    if (!stations || stations.length < 3) return null;\n\n    // Convert stations to points array\n    const points = stations.map(s => {\n      const point = map.latLngToLayerPoint([s.lat, s.lng]);\n      return [point.x, point.y];\n    });\n\n    // Create Delaunay triangulation\n    const delaunay = Delaunay.from(points);\n    const voronoi = delaunay.voronoi([0, 0, map.getSize().x, map.getSize().y]);\n\n    // Create SVG layer\n    const svg = L.svg().addTo(map);\n    const g = L.SVG.create('g');\n\n    // Draw Voronoi cells\n    for (let i = 0; i < points.length; i++) {\n      const cell = voronoi.cellPolygon(i);\n      if (cell) {\n        // Convert cell points back to LatLng\n        const latLngs = cell.map(point => {\n          const p = map.layerPointToLatLng([point[0], point[1]]);\n          return [p.lat, p.lng];\n        });\n\n        // Create polygon\n        const polygon = L.polygon(latLngs, {\n          color: '#000',\n          weight: 1,\n          fillColor: getColorForPrecipitation(stations[i].precipitation),\n          fillOpacity: 0.4\n        }).addTo(map);\n\n        // Add popup\n        polygon.bindPopup(`\n          Station: ${stations[i].name}<br>\n          Precipitation: ${stations[i].precipitation} mm\n        `);\n      }\n    }\n    return g;\n  }, [stations, map]);\n  return null;\n};\n_s(ThiessenLayer, \"qW4VCNGvhH53t2SVIGIBDxTyo5k=\", false, function () {\n  return [useMap];\n});\n_c = ThiessenLayer;\nfunction getColorForPrecipitation(value) {\n  return value < 50 ? '#3B82F6' :\n  // blue\n  value < 100 ? '#10B981' :\n  // green\n  value < 150 ? '#F59E0B' :\n  // yellow\n  '#EF4444'; // red\n}\nexport default ThiessenLayer;\nvar _c;\n$RefreshReg$(_c, \"ThiessenLayer\");","map":{"version":3,"names":["React","useMemo","useMap","L","Delaunay","ThiessenLayer","stations","_s","map","voronoiLayer","length","points","s","point","latLngToLayerPoint","lat","lng","x","y","delaunay","from","voronoi","getSize","svg","addTo","g","SVG","create","i","cell","cellPolygon","latLngs","p","layerPointToLatLng","polygon","color","weight","fillColor","getColorForPrecipitation","precipitation","fillOpacity","bindPopup","name","_c","value","$RefreshReg$"],"sources":["/home/deepak-silaych/Desktop/sem6/ce343/src/components/ThiessenLayer.js"],"sourcesContent":["import React, { useMemo } from 'react';\nimport { useMap } from 'react-leaflet';\nimport L from 'leaflet';\nimport { Delaunay } from 'd3-delaunay';\n\nconst ThiessenLayer = ({ stations }) => {\n  const map = useMap();\n\n  const voronoiLayer = useMemo(() => {\n    if (!stations || stations.length < 3) return null;\n\n    // Convert stations to points array\n    const points = stations.map(s => {\n      const point = map.latLngToLayerPoint([s.lat, s.lng]);\n      return [point.x, point.y];\n    });\n\n    // Create Delaunay triangulation\n    const delaunay = Delaunay.from(points);\n    const voronoi = delaunay.voronoi([0, 0, map.getSize().x, map.getSize().y]);\n\n    // Create SVG layer\n    const svg = L.svg().addTo(map);\n    const g = L.SVG.create('g');\n\n    // Draw Voronoi cells\n    for (let i = 0; i < points.length; i++) {\n      const cell = voronoi.cellPolygon(i);\n      if (cell) {\n        // Convert cell points back to LatLng\n        const latLngs = cell.map(point => {\n          const p = map.layerPointToLatLng([point[0], point[1]]);\n          return [p.lat, p.lng];\n        });\n\n        // Create polygon\n        const polygon = L.polygon(latLngs, {\n          color: '#000',\n          weight: 1,\n          fillColor: getColorForPrecipitation(stations[i].precipitation),\n          fillOpacity: 0.4\n        }).addTo(map);\n\n        // Add popup\n        polygon.bindPopup(`\n          Station: ${stations[i].name}<br>\n          Precipitation: ${stations[i].precipitation} mm\n        `);\n      }\n    }\n\n    return g;\n  }, [stations, map]);\n\n  return null;\n};\n\nfunction getColorForPrecipitation(value) {\n  return value < 50 ? '#3B82F6' :  // blue\n         value < 100 ? '#10B981' :  // green\n         value < 150 ? '#F59E0B' :  // yellow\n         '#EF4444';                 // red\n}\n\nexport default ThiessenLayer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}