{"ast":null,"code":"// Arithmetic Mean Method\nexport const calculateArithmeticMean = stations => {\n  if (!stations || stations.length === 0) return 0;\n  const sum = stations.reduce((acc, station) => acc + station.precipitation, 0);\n  return sum / stations.length;\n};\n\n// Normal Ratio Method\nexport const calculateNormalRatio = (stations, normalPrecipitation) => {\n  if (!stations || stations.length === 0 || !normalPrecipitation) return 0;\n\n  // Calculate weighted sum using normal precipitation\n  const weightedSum = stations.reduce((acc, station) => {\n    const ratio = station.precipitation / normalPrecipitation;\n    return acc + ratio;\n  }, 0);\n\n  // Calculate final precipitation value\n  return weightedSum / stations.length * normalPrecipitation;\n};\n\n// Inverse Distance Weighting Method\nexport const calculateIDW = (stations, targetLat, targetLng, power = 2) => {\n  if (!stations || stations.length === 0) return 0;\n  let weightedSum = 0;\n  let weightSum = 0;\n  stations.forEach(station => {\n    // Calculate distance using Haversine formula\n    const distance = calculateDistance(targetLat, targetLng, station.lat, station.lng);\n    if (distance === 0) return station.precipitation; // If point coincides with a station\n\n    const weight = 1 / Math.pow(distance, power);\n    weightedSum += station.precipitation * weight;\n    weightSum += weight;\n  });\n  return weightedSum / weightSum;\n};\n\n// Thiessen Polygon Method\nexport const calculateThiessenPolygon = (stations, bounds) => {\n  if (!stations || stations.length < 3) return null;\n\n  // Generate Voronoi diagram\n  const points = stations.map(s => [s.lat, s.lng]);\n  const voronoiPolygons = generateVoronoi(points, bounds);\n\n  // Calculate area-weighted precipitation\n  let totalArea = 0;\n  let weightedSum = 0;\n  voronoiPolygons.forEach((polygon, index) => {\n    const area = calculatePolygonArea(polygon);\n    weightedSum += area * stations[index].precipitation;\n    totalArea += area;\n  });\n  return {\n    value: weightedSum / totalArea,\n    polygons: voronoiPolygons\n  };\n};\n\n// Isohyetal Method\nexport const calculateIsohyetal = (stations, bounds, intervals = 5) => {\n  if (!stations || stations.length < 3) return null;\n\n  // Generate contour lines (isohyets)\n  const minPrecip = Math.min(...stations.map(s => s.precipitation));\n  const maxPrecip = Math.max(...stations.map(s => s.precipitation));\n  const interval = (maxPrecip - minPrecip) / intervals;\n  const isohyets = [];\n  for (let i = 0; i <= intervals; i++) {\n    const value = minPrecip + i * interval;\n    const points = interpolateContourPoints(stations, value, bounds);\n    isohyets.push({\n      value,\n      points\n    });\n  }\n\n  // Calculate area-weighted average\n  let totalArea = 0;\n  let weightedSum = 0;\n  for (let i = 0; i < isohyets.length - 1; i++) {\n    const area = calculateAreaBetweenIsohyets(isohyets[i], isohyets[i + 1]);\n    const avgPrecip = (isohyets[i].value + isohyets[i + 1].value) / 2;\n    weightedSum += area * avgPrecip;\n    totalArea += area;\n  }\n  return {\n    value: weightedSum / totalArea,\n    isohyets: isohyets\n  };\n};\n\n// Helper Functions\n\n// Calculate distance between two points using Haversine formula\nfunction calculateDistance(lat1, lon1, lat2, lon2) {\n  const R = 6371; // Earth's radius in km\n  const dLat = toRad(lat2 - lat1);\n  const dLon = toRad(lon2 - lon1);\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c;\n}\nfunction toRad(degrees) {\n  return degrees * Math.PI / 180;\n}\n\n// Generate Voronoi diagram using D3\nfunction generateVoronoi(points, bounds) {\n  // Implementation will use d3-voronoi\n  // This is a placeholder - will be implemented in the visualization component\n  return [];\n}\nfunction calculatePolygonArea(polygon) {\n  // Implementation using shoelace formula\n  if (!polygon || polygon.length < 3) return 0;\n  let area = 0;\n  for (let i = 0; i < polygon.length; i++) {\n    const j = (i + 1) % polygon.length;\n    area += polygon[i][0] * polygon[j][1];\n    area -= polygon[j][0] * polygon[i][1];\n  }\n  return Math.abs(area) / 2;\n}\nfunction interpolateContourPoints(stations, value, bounds) {\n  // Implementation will use d3-contour\n  // This is a placeholder - will be implemented in the visualization component\n  return [];\n}\nfunction calculateAreaBetweenIsohyets(isohyet1, isohyet2) {\n  // Placeholder - will be implemented with actual geometry calculations\n  return 1;\n}","map":{"version":3,"names":["calculateArithmeticMean","stations","length","sum","reduce","acc","station","precipitation","calculateNormalRatio","normalPrecipitation","weightedSum","ratio","calculateIDW","targetLat","targetLng","power","weightSum","forEach","distance","calculateDistance","lat","lng","weight","Math","pow","calculateThiessenPolygon","bounds","points","map","s","voronoiPolygons","generateVoronoi","totalArea","polygon","index","area","calculatePolygonArea","value","polygons","calculateIsohyetal","intervals","minPrecip","min","maxPrecip","max","interval","isohyets","i","interpolateContourPoints","push","calculateAreaBetweenIsohyets","avgPrecip","lat1","lon1","lat2","lon2","R","dLat","toRad","dLon","a","sin","cos","c","atan2","sqrt","degrees","PI","j","abs","isohyet1","isohyet2"],"sources":["/home/deepak-silaych/Desktop/sem6/ce343/src/utils/calculations.js"],"sourcesContent":["// Arithmetic Mean Method\nexport const calculateArithmeticMean = (stations) => {\n  if (!stations || stations.length === 0) return 0;\n  const sum = stations.reduce((acc, station) => acc + station.precipitation, 0);\n  return sum / stations.length;\n};\n\n// Normal Ratio Method\nexport const calculateNormalRatio = (stations, normalPrecipitation) => {\n  if (!stations || stations.length === 0 || !normalPrecipitation) return 0;\n  \n  // Calculate weighted sum using normal precipitation\n  const weightedSum = stations.reduce((acc, station) => {\n    const ratio = station.precipitation / normalPrecipitation;\n    return acc + ratio;\n  }, 0);\n  \n  // Calculate final precipitation value\n  return (weightedSum / stations.length) * normalPrecipitation;\n};\n\n// Inverse Distance Weighting Method\nexport const calculateIDW = (stations, targetLat, targetLng, power = 2) => {\n  if (!stations || stations.length === 0) return 0;\n\n  let weightedSum = 0;\n  let weightSum = 0;\n\n  stations.forEach(station => {\n    // Calculate distance using Haversine formula\n    const distance = calculateDistance(targetLat, targetLng, station.lat, station.lng);\n    if (distance === 0) return station.precipitation; // If point coincides with a station\n\n    const weight = 1 / Math.pow(distance, power);\n    weightedSum += station.precipitation * weight;\n    weightSum += weight;\n  });\n\n  return weightedSum / weightSum;\n};\n\n// Thiessen Polygon Method\nexport const calculateThiessenPolygon = (stations, bounds) => {\n  if (!stations || stations.length < 3) return null;\n\n  // Generate Voronoi diagram\n  const points = stations.map(s => [s.lat, s.lng]);\n  const voronoiPolygons = generateVoronoi(points, bounds);\n\n  // Calculate area-weighted precipitation\n  let totalArea = 0;\n  let weightedSum = 0;\n\n  voronoiPolygons.forEach((polygon, index) => {\n    const area = calculatePolygonArea(polygon);\n    weightedSum += area * stations[index].precipitation;\n    totalArea += area;\n  });\n\n  return {\n    value: weightedSum / totalArea,\n    polygons: voronoiPolygons\n  };\n};\n\n// Isohyetal Method\nexport const calculateIsohyetal = (stations, bounds, intervals = 5) => {\n  if (!stations || stations.length < 3) return null;\n\n  // Generate contour lines (isohyets)\n  const minPrecip = Math.min(...stations.map(s => s.precipitation));\n  const maxPrecip = Math.max(...stations.map(s => s.precipitation));\n  const interval = (maxPrecip - minPrecip) / intervals;\n\n  const isohyets = [];\n  for (let i = 0; i <= intervals; i++) {\n    const value = minPrecip + (i * interval);\n    const points = interpolateContourPoints(stations, value, bounds);\n    isohyets.push({ value, points });\n  }\n\n  // Calculate area-weighted average\n  let totalArea = 0;\n  let weightedSum = 0;\n\n  for (let i = 0; i < isohyets.length - 1; i++) {\n    const area = calculateAreaBetweenIsohyets(isohyets[i], isohyets[i + 1]);\n    const avgPrecip = (isohyets[i].value + isohyets[i + 1].value) / 2;\n    weightedSum += area * avgPrecip;\n    totalArea += area;\n  }\n\n  return {\n    value: weightedSum / totalArea,\n    isohyets: isohyets\n  };\n};\n\n// Helper Functions\n\n// Calculate distance between two points using Haversine formula\nfunction calculateDistance(lat1, lon1, lat2, lon2) {\n  const R = 6371; // Earth's radius in km\n  const dLat = toRad(lat2 - lat1);\n  const dLon = toRad(lon2 - lon1);\n  const a = \n    Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * \n    Math.sin(dLon/2) * Math.sin(dLon/2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n  return R * c;\n}\n\nfunction toRad(degrees) {\n  return degrees * Math.PI / 180;\n}\n\n// Generate Voronoi diagram using D3\nfunction generateVoronoi(points, bounds) {\n  // Implementation will use d3-voronoi\n  // This is a placeholder - will be implemented in the visualization component\n  return [];\n}\n\nfunction calculatePolygonArea(polygon) {\n  // Implementation using shoelace formula\n  if (!polygon || polygon.length < 3) return 0;\n  \n  let area = 0;\n  for (let i = 0; i < polygon.length; i++) {\n    const j = (i + 1) % polygon.length;\n    area += polygon[i][0] * polygon[j][1];\n    area -= polygon[j][0] * polygon[i][1];\n  }\n  return Math.abs(area) / 2;\n}\n\nfunction interpolateContourPoints(stations, value, bounds) {\n  // Implementation will use d3-contour\n  // This is a placeholder - will be implemented in the visualization component\n  return [];\n}\n\nfunction calculateAreaBetweenIsohyets(isohyet1, isohyet2) {\n  // Placeholder - will be implemented with actual geometry calculations\n  return 1;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}