{"ast":null,"code":"// Arithmetic Mean Method\nexport const calculateArithmeticMean = stations => {\n  return stations.reduce((sum, station) => sum + station.precipitation, 0) / stations.length;\n};\n\n// Normal Ratio Method\nexport const calculateNormalRatio = (stations, normalPrecipitation) => {\n  const n = stations.length;\n  let sum = 0;\n  stations.forEach(station => {\n    if (station.normalPrecipitation) {\n      sum += station.precipitation * normalPrecipitation / station.normalPrecipitation;\n    }\n  });\n  return sum / n;\n};\n\n// Inverse Distance Weighting Method\nexport const calculateIDW = (stations, targetLat, targetLng, power = 2) => {\n  let numerator = 0;\n  let denominator = 0;\n  stations.forEach(station => {\n    // Calculate distance using Haversine formula\n    const distance = calculateDistance(targetLat, targetLng, station.lat, station.lng);\n    const weight = 1 / Math.pow(distance, power);\n    numerator += station.precipitation * weight;\n    denominator += weight;\n  });\n  return numerator / denominator;\n};\n\n// Helper function to calculate distance between two points using Haversine formula\nconst calculateDistance = (lat1, lon1, lat2, lon2) => {\n  const R = 6371; // Earth's radius in kilometers\n  const dLat = toRad(lat2 - lat1);\n  const dLon = toRad(lon2 - lon1);\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c;\n};\nconst toRad = value => {\n  return value * Math.PI / 180;\n};","map":{"version":3,"names":["calculateArithmeticMean","stations","reduce","sum","station","precipitation","length","calculateNormalRatio","normalPrecipitation","n","forEach","calculateIDW","targetLat","targetLng","power","numerator","denominator","distance","calculateDistance","lat","lng","weight","Math","pow","lat1","lon1","lat2","lon2","R","dLat","toRad","dLon","a","sin","cos","c","atan2","sqrt","value","PI"],"sources":["/home/deepak-silaych/Desktop/sem6/ce343/src/utils/calculations.js"],"sourcesContent":["// Arithmetic Mean Method\nexport const calculateArithmeticMean = (stations) => {\n  return stations.reduce((sum, station) => \n    sum + station.precipitation, 0) / stations.length;\n};\n\n// Normal Ratio Method\nexport const calculateNormalRatio = (stations, normalPrecipitation) => {\n  const n = stations.length;\n  let sum = 0;\n  \n  stations.forEach(station => {\n    if (station.normalPrecipitation) {\n      sum += (station.precipitation * normalPrecipitation) / station.normalPrecipitation;\n    }\n  });\n  \n  return sum / n;\n};\n\n// Inverse Distance Weighting Method\nexport const calculateIDW = (stations, targetLat, targetLng, power = 2) => {\n  let numerator = 0;\n  let denominator = 0;\n\n  stations.forEach(station => {\n    // Calculate distance using Haversine formula\n    const distance = calculateDistance(\n      targetLat, \n      targetLng, \n      station.lat, \n      station.lng\n    );\n    \n    const weight = 1 / Math.pow(distance, power);\n    numerator += station.precipitation * weight;\n    denominator += weight;\n  });\n\n  return numerator / denominator;\n};\n\n// Helper function to calculate distance between two points using Haversine formula\nconst calculateDistance = (lat1, lon1, lat2, lon2) => {\n  const R = 6371; // Earth's radius in kilometers\n  const dLat = toRad(lat2 - lat1);\n  const dLon = toRad(lon2 - lon1);\n  \n  const a = \n    Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * \n    Math.sin(dLon/2) * Math.sin(dLon/2);\n  \n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n  return R * c;\n};\n\nconst toRad = (value) => {\n  return value * Math.PI / 180;\n};\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,uBAAuB,GAAIC,QAAQ,IAAK;EACnD,OAAOA,QAAQ,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEC,OAAO,KAClCD,GAAG,GAAGC,OAAO,CAACC,aAAa,EAAE,CAAC,CAAC,GAAGJ,QAAQ,CAACK,MAAM;AACrD,CAAC;;AAED;AACA,OAAO,MAAMC,oBAAoB,GAAGA,CAACN,QAAQ,EAAEO,mBAAmB,KAAK;EACrE,MAAMC,CAAC,GAAGR,QAAQ,CAACK,MAAM;EACzB,IAAIH,GAAG,GAAG,CAAC;EAEXF,QAAQ,CAACS,OAAO,CAACN,OAAO,IAAI;IAC1B,IAAIA,OAAO,CAACI,mBAAmB,EAAE;MAC/BL,GAAG,IAAKC,OAAO,CAACC,aAAa,GAAGG,mBAAmB,GAAIJ,OAAO,CAACI,mBAAmB;IACpF;EACF,CAAC,CAAC;EAEF,OAAOL,GAAG,GAAGM,CAAC;AAChB,CAAC;;AAED;AACA,OAAO,MAAME,YAAY,GAAGA,CAACV,QAAQ,EAAEW,SAAS,EAAEC,SAAS,EAAEC,KAAK,GAAG,CAAC,KAAK;EACzE,IAAIC,SAAS,GAAG,CAAC;EACjB,IAAIC,WAAW,GAAG,CAAC;EAEnBf,QAAQ,CAACS,OAAO,CAACN,OAAO,IAAI;IAC1B;IACA,MAAMa,QAAQ,GAAGC,iBAAiB,CAChCN,SAAS,EACTC,SAAS,EACTT,OAAO,CAACe,GAAG,EACXf,OAAO,CAACgB,GACV,CAAC;IAED,MAAMC,MAAM,GAAG,CAAC,GAAGC,IAAI,CAACC,GAAG,CAACN,QAAQ,EAAEH,KAAK,CAAC;IAC5CC,SAAS,IAAIX,OAAO,CAACC,aAAa,GAAGgB,MAAM;IAC3CL,WAAW,IAAIK,MAAM;EACvB,CAAC,CAAC;EAEF,OAAON,SAAS,GAAGC,WAAW;AAChC,CAAC;;AAED;AACA,MAAME,iBAAiB,GAAGA,CAACM,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACpD,MAAMC,CAAC,GAAG,IAAI,CAAC,CAAC;EAChB,MAAMC,IAAI,GAAGC,KAAK,CAACJ,IAAI,GAAGF,IAAI,CAAC;EAC/B,MAAMO,IAAI,GAAGD,KAAK,CAACH,IAAI,GAAGF,IAAI,CAAC;EAE/B,MAAMO,CAAC,GACLV,IAAI,CAACW,GAAG,CAACJ,IAAI,GAAC,CAAC,CAAC,GAAGP,IAAI,CAACW,GAAG,CAACJ,IAAI,GAAC,CAAC,CAAC,GACnCP,IAAI,CAACY,GAAG,CAACJ,KAAK,CAACN,IAAI,CAAC,CAAC,GAAGF,IAAI,CAACY,GAAG,CAACJ,KAAK,CAACJ,IAAI,CAAC,CAAC,GAC7CJ,IAAI,CAACW,GAAG,CAACF,IAAI,GAAC,CAAC,CAAC,GAAGT,IAAI,CAACW,GAAG,CAACF,IAAI,GAAC,CAAC,CAAC;EAErC,MAAMI,CAAC,GAAG,CAAC,GAAGb,IAAI,CAACc,KAAK,CAACd,IAAI,CAACe,IAAI,CAACL,CAAC,CAAC,EAAEV,IAAI,CAACe,IAAI,CAAC,CAAC,GAACL,CAAC,CAAC,CAAC;EACtD,OAAOJ,CAAC,GAAGO,CAAC;AACd,CAAC;AAED,MAAML,KAAK,GAAIQ,KAAK,IAAK;EACvB,OAAOA,KAAK,GAAGhB,IAAI,CAACiB,EAAE,GAAG,GAAG;AAC9B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}